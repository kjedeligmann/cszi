package main

import (
	"fmt"
)

func mod(num int, mod uint) (res int) {
	res = num % int(mod)

	if res < 0 {
		res += int(mod)
	}

	return res
}

const ukrAlfLen = 34

var ukr = []rune("абвгґдеєжзиіїйклмнопрстуфхцчшщьюя_")

var ukrLetterToIdx = map[rune]struct {
	Idx int
}{
	'а': {0},
	'б': {1},
	'в': {2},
	'г': {3},
	'ґ': {4},
	'д': {5},
	'е': {6},
	'є': {7},
	'ж': {8},
	'з': {9},
	'и': {10},
	'і': {11},
	'ї': {12},
	'й': {13},
	'к': {14},
	'л': {15},
	'м': {16},
	'н': {17},
	'о': {18},
	'п': {19},
	'р': {20},
	'с': {21},
	'т': {22},
	'у': {23},
	'ф': {24},
	'х': {25},
	'ц': {26},
	'ч': {27},
	'ш': {28},
	'щ': {29},
	'ь': {30},
	'ю': {31},
	'я': {32},
	'_': {33},
}

func encVigenere(text, key []rune) (result []rune) {
    result = make([]rune, len(text))
	copy(result, text)
	keyLen := uint(len(key))

	for i, rune := range text {
		if m, in := ukrLetterToIdx[rune]; in {
			k := ukrLetterToIdx[key[mod(i, keyLen)]]
			c := mod(m.Idx+k.Idx, ukrAlfLen)
			result[i] = ukr[c]
		}
	}
	return
}

func decVigenere(text, key []rune) (result []rune) {
    result = make([]rune, len(text))
	copy(result, text)
	keyLen := uint(len(key))

	for i, rune := range text {
		if c, in := ukrLetterToIdx[rune]; in {
			k := ukrLetterToIdx[key[mod(i, keyLen)]]
			m := mod(c.Idx-k.Idx, ukrAlfLen) // the only difference
			result[i] = ukr[m]
		}
	}
	return
}

func gcd(u, v int) (result int) {
	var r int
	for v != 0 {
		r = mod(int(u), uint(v))
		u = v
		v = r
	}
	return u
}

func readingColumns(ciphertext []rune, keyLen uint) (key []rune) {
	freqs := make([][]int, keyLen, keyLen)
	for i := 0; i < int(keyLen); i++ {
		freqs[i] = make([]int, ukrAlfLen, ukrAlfLen)
	}
	for idx, c := range ciphertext {
		freqs[mod(idx, keyLen)][ukrLetterToIdx[c].Idx]++
	}

	key = make([]rune, keyLen, keyLen)
	for idx, column := range freqs {
		var maximum int
		for letter, frequency := range column {
			if frequency > column[maximum] {
				maximum = letter
			}
		}
		key[idx] = ukr[mod(maximum+1, ukrAlfLen)]
	}
	return
}

func idxCoincidence(length int, freqs []int) float64 {
	var sum int
	for _, freq := range freqs {
		sum += freq * (freq - 1)
	}
	return float64(sum) / float64(length*(length-1))
}

func friedman(ciphertext []rune) (keyLen int) {
	var maxIC float64
	var bestL = 1

	for l := 1; l <= 7; l++ {
		freqs := make([][]int, l, l)
		lengths := make([]int, l, l)
		for i := 0; i < int(l); i++ {
			freqs[i] = make([]int, ukrAlfLen, ukrAlfLen)
		}
		for idx, c := range ciphertext {
			freqs[mod(idx, uint(l))][ukrLetterToIdx[c].Idx]++
			lengths[mod(idx, uint(l))]++
		}
		var avgIC float64
		for c, freq := range freqs {
			avgIC += idxCoincidence(lengths[c], freq)
		}
		avgIC /= float64(l)
		if avgIC > maxIC {
			maxIC = avgIC
			bestL = l
		}
	}
	return bestL
}

func main() {
	fmt.Println("Завдання 1. Знайти ключ відомої довжини (шифр Віженера)")

	test := []rune("туьврнлуьвхісйяврм_ґдзяврікздчлнєомвзікдипбвуоуєуагшрк_цґооврплдсжхґс_яфрп_чсзрґюшк_чйгфґаяердїпдшкрюк_бивлррїчнцонввікаижякд_аґюєюбя_в_двлнь_швфокрисгнвуяовикрют_бкеяво_дґснєєььщво_ювуоїнїожорзлссл_арвцбрнснєофєгіннмокядїгкжякзддх_д_жшгаьврпьщзощнпккщрзлчуижоа_ннзащшї_ншеарясхкюдг_нфеяфєаьнжтлрсвкржекдив_ґяшхюрйкдив_ґяшхюрщсна_єфа_мфвьощшцінь'йрюввмрнлгчвяфрзкоґгьщ__аґюбґррп_гчрсуґішнзиуучнінтуннґарчуижоан_нцинбюмкядїьшжякотс__отяврнсчєофєгіьщррсія__уюнкщь_нщцдлбюхквіієфєіннучхбювкдсм_сибвеуокщґшхюрп_усвкєрвцужтлрбукчфорвг_ґдч_фожп_ядїьвжякщргсбчрл_рк_аснршє_ьфатсбснгордїпдшлнґажфрлцернлнцевмзькгдм__ддзоу_ьфатсбснгнуиаоцк_рд_авкуннкавебукґдзювуикаяжксчнсґсл_артлнґефбсй_айеюнуикрєягєуаьшрнлдрдбєщекдбафоу_офґебов_фнеенбдюкеєинвфоїнаооврбц_я_нєжакеєеюеялхнуикрєягєуаьшрчсдзькоємцьрфбоґццьрвцууеббилхнжтболнснбр_рдпбввигеп_рмбуїнмокгдг_уюлхдп_яорм_лрпбвеофшйіїнерхьїагшрвкескґнцаьфкіякрнлнмокбчзяоаоюфйькюдг_ням'мрбґ_д_сґбюькрпґоєокчсзяокиннмокрю_ещтакмрмцсрзлпитхнмокрю_юфґікґснцїч_нґптґрслхнщигеп_офґебов_ншжл_рюввмрщ_наооврзлдвуошрй_сд_афєемщвьзфґікщрїебп_бвьм_рс_аґдд_рщиьожякррзншкашбдмґнцувщрдснгоубс_мєвокгдчґею_в_двлнірлбйійнтеькфійнкевен_авуаоортлнянзщрзовцоюнуояшромщанй_юсйнзакґдзаґдщл_юсйнер_нмокюлллнгонорлсюзеяоґткуоб_їртлярікбч_фґдзґаявковекудрґічнямрпбвуевею_аєср_нґакесвбднкхюрещдерсдрбґ_д_авбллучнснґакбнооврт_аи_фнуеьшбоїньанчптцдзюкадл_уюйкпсгледомщйяїіюйквіієфє_нчпввмрзлнґь_сд")
	var kL uint = 4
	k := readingColumns(test, kL)

	fmt.Printf("Довжина ключа: %d\n", kL)
	fmt.Printf("Криптограма:\n%s\n", string(test))
	fmt.Printf("Знайдений ключ: %s\n", string(k))
	fmt.Printf("Розшифрована криптограма:\n%s\n", string(decVigenere(test, k)))

	fmt.Println("Завдання 2. Знайти ключ невідомої довжини (шифр Віженера)")

	test2 := []rune("иеєщікюуиопімлґзщ_ємжіппцтґтцнґгґ_офцсішяибркьпїцлююґ_юзїоахчльзвасьчтьзїагшщупп_мбєцмьчмвпвґльуцтьояегецабмцлнлг_тиьабркьпїкіпччпе_бегшцжхижипицчґйі_єизепчґхжшцдґійепч__щччвпшянюзідгшцгґїірьхг_рзярзйґ_хьмгцзґ_щзлиізйощцівпюїлюячлрюу_єслкрзщ_офґйпчґ_асицозиіпщічряєупічсж_щабицчрймнаицбрюлутижипьібґгґ_єфйіщецбзхі_ухмхґзєабизужчі_єизожчуопжєоєеціпяґлмфг_уьчкьзроечгмпхчнїєьовзєрьхцвпжвабрцзпющіжшз_ємжопдісмзяіохісмзиатфйуурцмґїцнріжишижаєецгеияотицхвийапицзтсякьзїрьуяепл__тщчдцзґ_лшцзрг_пьяу_гмввююиопїчжашцтерщошчі_хроабшкьпїківзм_жсцпґбзуесцдгсціпч_сдшєі_чі_вриабрцдґїьіпшкігчґ_гшріпжєбьзотґзєрьфиутзиапщйоссцбґїєнзїцнцюїохсщагшцдщїґнпишопьізесватзьуєя__дшщіжьх_дшктесж_е_сньвґ_бєяипїгбюйжипіцзпбчтпяч_ариубркьпшклющцохчґ_гицохчгхпйчфюуєапч__вшьлрзкпряг_дшцнґгчхпжє_жсжьарцсвмйкрхі_дсяпрьч_щикутищ_єсиекчґ_хї_рюзїрґімврїцдґїьопгг_хшшрцзвавфиегсціпщ_ркмцнюоцосххгрягсмзвдюузатзйукчгцнззоєягвпіґлозкесмцсґфгрззьаєржоєжцстсллґзчлцзьаисекрзвнрхч_лшцхрпхїгзиепюїижецчзхч_офцвючцнцюїоасенґзщое_ситюх_гицлрїґ_тибкґзкодсщ_єсяатзґ_гиклзбчвпщітґцм_щчівззщкбияатюх_юзжешищ_дьгчртщшьюу_рх__еиїтґццзерщатюх_юзсаерщ_дшцдґхґвїсцрзфіюпщікьзиеппиаішяитзкоарйиппиотзлиішцсжищабшцнрзєібеєапбщибри_дся_бищкрцг_дртабрцмьґґ_лшцвшмцпць_бььчльюу_гицзьцм_хшцхряг_жицтрььагрцшрьмдюхг_зззиєчгкззчлцзїіхщчррзиепюїатзьаисецюзвдрїчлґюу_лшцвґчч_сирижецйґйі_ешвпбєтегсцойсцвж_їлцчґ_тзїіжезу")
	kL2 := friedman(test2)
	k2 := readingColumns(test2, kL)

	fmt.Printf("Криптограма:\n%s\n", string(test2))
	fmt.Printf("Довжина ключа за методом Фрідмана: %d\n", kL2)
	fmt.Printf("Знайдений ключ: %s\n", string(k2))
	fmt.Printf("Розшифрована криптограма:\n%s\n", string(decVigenere(test2, k2)))
}
